install.packages("knitr")
install.packages("kableExtra")
install.packages("tidyverse")
install.packages("dplyr")
library(knitr)
library(kableExtra)
library(tidyverse)
library(dplyr)
origen <- 'https://raw.githubusercontent.com/vpcincin/DataWrangling/main/Data_Dictionary.csv'
spotify_diccionario <- readr::read_csv(origen)
view(spotify_diccionario)
kable(spotify_diccionario[,], format = "simple")
spotify_canciones <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv')
view(spotify_canciones)
dim(spotify_canciones)
sum(is.na(spotify_canciones))
colSums(is.na(spotify_canciones))
names(spotify_canciones)
str(spotify_canciones[])
#Modificar los tipos de datos
spotify_canciones$mode <- as.factor(spotify_canciones$mode)
class(spotify_canciones$mode)
spotify_canciones$track_album_release_date <- as.Date(spotify_canciones$track_album_release_date)
class(spotify_canciones$Date)
class(spotify_canciones$track_album_release_date)
str(spotify_canciones[])
#Limpiar la informacion
spotify_canciones$track_artist[is.na(spotify_canciones$track_artist)] <- 'unknown'
spotify_canciones$track_album_name[is.na(spotify_canciones$track_album_name)] <- 'unknown'
spotify_canciones$track_name[is.na(spotify_canciones$track_name)] <- 'unknown'
# Ver sino hay valor pedido en nuestros datos
sum(is.na(spotify_canciones))
colSums(is.na(spotify_canciones))
# Ver resume
summary(select_if(spotify_canciones,is.numeric))
niveles <- lapply(select_if(spotify_canciones,is.character),unique)
view(niveles)
niveles <- lapply(select_if(spotify_canciones,is.character),unique)
view(niveles)
cantidad <- lengths(niveles)
cantidad
niveles <- lapply(select_if(spotify_canciones,is.character),unique)
view(niveles)
cantidad <-lengths(niveles)
niveles
niveles <- lapply(select_if(spotify_canciones,is.character),unique)
cantidad <-lengths(niveles)
cantidad
boxplot(spotify_canciones$danceability, main= 'Diagrama de cajas de Danceability')
boxplot(spotify_canciones$loudness, main= 'Diagrama de cajas de Volumen')
boxplot(spotify_canciones$tempo, main= 'Diagrama de distribucion de tiempo')
nuevo_datframe <- subset(spotify_canciones,danceability > min(danceability) & loudness >  min(loudness) & tempo > min(tempo) & tempo < max(tempo))
view(nuevo_datframe)
summary(select_if(spotify_canciones,is.numeric))
boxplot(nuevo_datframe$danceability, main= 'Diagrama de distribuccion de danceability')
boxplot(nuevo_datframe$loudness, main= 'Diagrama de distribuccion de volumen')
boxplot(nuevo_datframe$tempo, main= 'Diagrama de distribuccion de tiempo')
knitr::kable(head(nuevo_datframe,5),"simple")
#Usamos un histograma
hist(nuevo_datframe$track_popularity,main="Distribuccion de canciones mas populares",xlab="Populares",col='light blue')
hist(nuevo_datframe$danceability,main="Distribuccion de canciones mas bailares",xlab="Bailables",col='light blue')
hist(nuevo_datframe$energy,main="Distribuccion de canciones mas Energy",xlab="Energy",col='light blue')
hist(nuevo_datframe$loudness,main="Distribuccion volumen",xlab="Volumen",col='light blue')
nuevo_datframe$duration_min <- nuevo_datframe$duration_ms / 60000
view(nuevo_datframe)
hist(nuevo_datframe$duration_min,main="Distribuccion Minutos",xlab="Minutos",col='light blue')

